import heapq

graph = {
    'A': {'B': 2, 'C': 4},
    'B': {'A': 2, 'C': 1, 'D': 7},
    'C': {'A': 4, 'B': 1, 'D': 3, 'E': 5},
    'D': {'B': 7, 'C': 3, 'E': 2, 'F': 6},
    'E': {'C': 5, 'D': 2, 'F': 3},
    'F': {'D': 6, 'E': 3}
}

def dijkstra(graph, start, end):
    queue = [(0, start)]

    distances = {node: float('infinity') for node in graph}
    distances[start] = 0

    path = {}

    while queue:
        current_distance, current_node = heapq.heappop(queue)

        if current_node == end:
            break

        if current_distance > distances[current_node]:
            continue

        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight

            if distance < distances[neighbor]:
                distances[neighbor] = distance
                path[neighbor] = current_node
                heapq.heappush(queue, (distance, neighbor))

    shortest_path = []
    node = end
    while node in path:
        shortest_path.append(node)
        node = path[node]
    shortest_path.append(start)
    shortest_path.reverse()

    return shortest_path, distances[end]

start_node = 'A'
end_node = 'F'
shortest_path, total_distance = dijkstra(graph, start_node, end_node)

shortest_path, total_distance
